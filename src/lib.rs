#![doc = include_str!("../README.md")]

use std::{
    fs::{self, File, OpenOptions},
    io::{self, Read},
    path::Path,
};

/// Split a file or other data stream into chunks of a given size
///
/// The contents of `source` will be copied into files of size `chunk_size`, which are indexed and
/// placed in the `dir` directory. The same `dir` can be provided to the [`join`] function to
/// reassemble the original file.
pub fn split(
    source: &mut impl io::Read,
    dir: &(impl AsRef<Path> + ?Sized),
    chunk_size: u64,
) -> io::Result<()> {
    fs::create_dir(dir)?;
    for i in 0usize.. {
        let length = io::copy(
            &mut source.take(chunk_size),
            &mut OpenOptions::new()
                .create(true)
                .truncate(true)
                .write(true)
                .open(dir.as_ref().join(i.to_string()))?,
        )?;
        if length < chunk_size {
            break;
        }
    }
    Ok(())
}

/// Reassemble a file from a directory generated by [`split`]
///
/// Given a directory of numbered files, stitch the files back together to recreate the original
/// file.
pub fn join(
    dir: &(impl AsRef<Path> + ?Sized),
    target: &(impl AsRef<Path> + ?Sized),
) -> io::Result<()> {
    let dir = dir.as_ref();
    let mut file = OpenOptions::new()
        .create(true)
        .truncate(true)
        .write(true)
        .open(target)?;
    for i in 0usize.. {
        io::copy(&mut File::open(dir.join(i.to_string()))?, &mut file)?;
    }
    Ok(())
}
